# -*- coding: utf-8 -*-
"""industrial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lFYRbhqnUUuJ0rFoNEGCGi9tH0sZKTjk
"""

import pandas as pd

df = pd.read_csv("industrial_safety_and_health_database.csv")
print(df.head())
print(df.info())
print(df.describe())

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

file_path = 'industrial_safety_and_health_database.csv'
df = pd.read_csv(file_path)

df['Data'] = pd.to_datetime(df['Data'])

categorical_features = ['Countries', 'Local', 'Industry Sector', 'Genre', 'Employee ou Terceiro', 'Risco Critico']
target_variable = 'Accident Level'

X = df[categorical_features]
y = df[target_variable]

X = pd.get_dummies(X, drop_first=True)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=_)

    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=_)
    rf_classifier.fit(X_train, y_train)

    y_pred = rf_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'{accuracy*100:.2f}')

mean_accuracy = sum(accuracies) / len(accuracies)
print(f'\nMean Accuracy: {mean_accuracy:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

file_path = 'industrial_safety_and_health_database.csv'
df = pd.read_csv(file_path)

df['Data'] = pd.to_datetime(df['Data'])

categorical_features = ['Countries', 'Local', 'Industry Sector', 'Genre', 'Employee ou Terceiro', 'Risco Critico']
target_variable = 'Accident Level'

X = df[categorical_features]
y = df[target_variable]

X = pd.get_dummies(X, drop_first=True)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=_)

    svm_classifier = SVC()
    svm_classifier.fit(X_train, y_train)

    y_pred = svm_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'{accuracy*100:.2f}')

mean_accuracy = sum(accuracies) / len(accuracies)
print(f'\nMean Accuracy: {mean_accuracy:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

file_path = 'industrial_safety_and_health_database.csv'
df = pd.read_csv(file_path)

df['Data'] = pd.to_datetime(df['Data'])

categorical_features = ['Countries', 'Local', 'Industry Sector', 'Genre', 'Employee ou Terceiro', 'Risco Critico']
target_variable = 'Accident Level'

X = df[categorical_features]
y = df[target_variable]

X = pd.get_dummies(X, drop_first=True)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=_)

    dt_classifier = DecisionTreeClassifier()
    dt_classifier.fit(X_train, y_train)

    y_pred = dt_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'{accuracy*100:.2f}')

mean_accuracy = sum(accuracies) / len(accuracies)
print(f'\nMean Accuracy: {mean_accuracy:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score

file_path = 'industrial_safety_and_health_database.csv'
df = pd.read_csv(file_path)

df['Data'] = pd.to_datetime(df['Data'])

categorical_features = ['Countries', 'Local', 'Industry Sector', 'Genre', 'Employee ou Terceiro', 'Risco Critico']
target_variable = 'Accident Level'

X = df[categorical_features]
y = df[target_variable]

X = pd.get_dummies(X, drop_first=True)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=_)

    gb_classifier = GradientBoostingClassifier()
    gb_classifier.fit(X_train, y_train)

    y_pred = gb_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'{accuracy*100:.2f}')

mean_accuracy = sum(accuracies) / len(accuracies)
print(f'\nMean Accuracy: {mean_accuracy:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score

file_path = 'industrial_safety_and_health_database.csv'
df = pd.read_csv(file_path)

df['Data'] = pd.to_datetime(df['Data'])

categorical_features = ['Countries', 'Local', 'Industry Sector', 'Genre', 'Employee ou Terceiro', 'Risco Critico']
target_variable = 'Accident Level'

X = df[categorical_features]
y = df[target_variable]

X = pd.get_dummies(X, drop_first=True)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=_)

    ab_classifier = AdaBoostClassifier()
    ab_classifier.fit(X_train, y_train)

    y_pred = ab_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'{accuracy*100:.2f}')

mean_accuracy = sum(accuracies) / len(accuracies)
print(f'\nMean Accuracy: {mean_accuracy:.2f}')