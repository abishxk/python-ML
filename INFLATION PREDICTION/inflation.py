# -*- coding: utf-8 -*-
"""inflation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LbyOFUnz25Ps5GUsPJiXW77qi30z2EYq
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

df = pd.read_csv("Global Dataset of Inflation.csv", encoding='latin-1')
features = df.columns[5:]
numeric_columns = df[features].select_dtypes(include=['number']).columns

X = df[numeric_columns]
y = df['2022']
bins = [-float('inf'), 2, 5, float('inf')]
labels = ['Low', 'Medium', 'High']
y_class = pd.cut(y, bins=bins, labels=labels, right=False)

accuracies = []

for i in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=None)

    imputer = SimpleImputer(strategy='mean')
    X_train_imputed = imputer.fit_transform(X_train)
    X_test_imputed = imputer.transform(X_test)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train_imputed)
    X_test_scaled = scaler.transform(X_test_imputed)

    label_encoder = LabelEncoder()
    y_train_encoded = label_encoder.fit_transform(y_train)
    y_test_encoded = label_encoder.transform(y_test)

    knn_classifier = KNeighborsClassifier(n_neighbors=5)
    knn_classifier.fit(X_train_scaled, y_train_encoded)
    predictions = knn_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test_encoded, predictions)
    accuracies.append(accuracy)

    print(f'Accuracy {i+1}: {accuracy}')

mean_accuracy = np.mean(accuracies)
print("\nMean Accuracy:", mean_accuracy)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

df = pd.read_csv("Global Dataset of Inflation.csv", encoding='latin-1')
features = df.columns[5:]
numeric_columns = df[features].select_dtypes(include=['number']).columns

X = df[numeric_columns]
y = df['2022']
bins = [-float('inf'), 2, 5, float('inf')]
labels = ['Low', 'Medium', 'High']
y_class = pd.cut(y, bins=bins, labels=labels, right=False)

accuracies = []

for i in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=None)

    imputer = SimpleImputer(strategy='mean')
    X_train_imputed = imputer.fit_transform(X_train)
    X_test_imputed = imputer.transform(X_test)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train_imputed)
    X_test_scaled = scaler.transform(X_test_imputed)

    label_encoder = LabelEncoder()
    y_train_encoded = label_encoder.fit_transform(y_train)
    y_test_encoded = label_encoder.transform(y_test)

    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=None)
    rf_classifier.fit(X_train_scaled, y_train_encoded)
    predictions = rf_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test_encoded, predictions)
    accuracies.append(accuracy)

    print(f'Accuracy {i+1}: {accuracy}')

mean_accuracy = np.mean(accuracies)
print("\nMean Accuracy:", mean_accuracy)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

df = pd.read_csv("Global Dataset of Inflation.csv", encoding='latin-1')
features = df.columns[5:]
numeric_columns = df[features].select_dtypes(include=['number']).columns

X = df[numeric_columns]
y = df['2022']
bins = [-float('inf'), 2, 5, float('inf')]
labels = ['Low', 'Medium', 'High']
y_class = pd.cut(y, bins=bins, labels=labels, right=False)

accuracies = []

for i in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=None)

    imputer = SimpleImputer(strategy='mean')
    X_train_imputed = imputer.fit_transform(X_train)
    X_test_imputed = imputer.transform(X_test)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train_imputed)
    X_test_scaled = scaler.transform(X_test_imputed)

    label_encoder = LabelEncoder()
    y_train_encoded = label_encoder.fit_transform(y_train)
    y_test_encoded = label_encoder.transform(y_test)

    dt_classifier = DecisionTreeClassifier(random_state=None)
    dt_classifier.fit(X_train_scaled, y_train_encoded)
    predictions = dt_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test_encoded, predictions)
    accuracies.append(accuracy)

    print(f'Accuracy {i+1}: {accuracy}')

mean_accuracy = np.mean(accuracies)
print("\nMean Accuracy:", mean_accuracy)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

df = pd.read_csv("Global Dataset of Inflation.csv", encoding='latin-1')
features = df.columns[5:]
numeric_columns = df[features].select_dtypes(include=['number']).columns

X = df[numeric_columns]
y = df['2022']
bins = [-float('inf'), 2, 5, float('inf')]
labels = ['Low', 'Medium', 'High']
y_class = pd.cut(y, bins=bins, labels=labels, right=False)

accuracies = []

for i in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=None)

    imputer = SimpleImputer(strategy='mean')
    X_train_imputed = imputer.fit_transform(X_train)
    X_test_imputed = imputer.transform(X_test)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train_imputed)
    X_test_scaled = scaler.transform(X_test_imputed)

    label_encoder = LabelEncoder()
    y_train_encoded = label_encoder.fit_transform(y_train)
    y_test_encoded = label_encoder.transform(y_test)

    nb_classifier = GaussianNB()
    nb_classifier.fit(X_train_scaled, y_train_encoded)
    predictions = nb_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test_encoded, predictions)
    accuracies.append(accuracy)

    print(f'Accuracy {i+1}: {accuracy}')

mean_accuracy = np.mean(accuracies)
print("\nMean Accuracy:", mean_accuracy)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import numpy as np


df = pd.read_csv("Global Dataset of Inflation.csv", encoding='latin-1')
features = df.columns[5:]
numeric_columns = df[features].select_dtypes(include=['number']).columns


X = df[numeric_columns]
y = df['2022']
bins = [-float('inf'), 2, 5, float('inf')]
labels = ['Low', 'Medium', 'High']
y_class = pd.cut(y, bins=bins, labels=labels, right=False)


accuracies = []


for i in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=None)


    imputer = SimpleImputer(strategy='mean')
    X_train_imputed = imputer.fit_transform(X_train)
    X_test_imputed = imputer.transform(X_test)


    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train_imputed)
    X_test_scaled = scaler.transform(X_test_imputed)


    label_encoder = LabelEncoder()
    y_train_encoded = label_encoder.fit_transform(y_train)
    y_test_encoded = label_encoder.transform(y_test)


    lr_classifier = LogisticRegression(random_state=None, max_iter=1000)
    lr_classifier.fit(X_train_scaled, y_train_encoded)
    predictions = lr_classifier.predict(X_test_scaled)


    accuracy = accuracy_score(y_test_encoded, predictions)
    accuracies.append(accuracy)


    print(f'Accuracy {i+1}: {accuracy}')


mean_accuracy = np.mean(accuracies)
print("\nMean Accuracy:", mean_accuracy)