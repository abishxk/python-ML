# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15WFdpwJothFAR8ST8alZwX-Yy5u_BM18
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')

X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']

threshold = y.mean()
y_binary = (y >= threshold).astype(int)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    knn_classifier = KNeighborsClassifier(n_neighbors=5)
    knn_classifier.fit(X_train_scaled, y_train)

    y_pred = knn_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"Accuracy {_ + 1}: {accuracy:.2f}%")

mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')

X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']

threshold = y.mean()
y_binary = (y >= threshold).astype(int)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    svm_classifier = SVC(kernel='linear', C=1.0)
    svm_classifier.fit(X_train_scaled, y_train)

    y_pred = svm_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"SVM Accuracy {_ + 1}: {accuracy:.2f}%")

mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean SVM Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')

X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']

threshold = y.mean()
y_binary = (y >= threshold).astype(int)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    nb_classifier = GaussianNB()
    nb_classifier.fit(X_train_scaled, y_train)

    y_pred = nb_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"Naive Bayes Accuracy {_ + 1}: {accuracy:.2f}%")

mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean Naive Bayes Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')
X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']
threshold = y.mean()
y_binary = (y >= threshold).astype(int)
accuracies = []
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    ann_classifier = MLPClassifier(hidden_layer_sizes=(100, ), max_iter=1000, random_state=None)
    ann_classifier.fit(X_train_scaled, y_train)
    y_pred = ann_classifier.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"ANN Accuracy {_ + 1}: {accuracy:.2f}%")
mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean ANN Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')
X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']
threshold = y.mean()
y_binary = (y >= threshold).astype(int)
accuracies = []
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    lr_classifier = LogisticRegression(random_state=None)
    lr_classifier.fit(X_train_scaled, y_train)
    y_pred = lr_classifier.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"Logistic Regression Accuracy {_ + 1}: {accuracy:.2f}%")
mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean Logistic Regression Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')

X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']

threshold = y.mean()
y_binary = (y >= threshold).astype(int)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)

    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=None)
    rf_classifier.fit(X_train, y_train)

    y_pred = rf_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"Random Forest Accuracy {_ + 1}: {accuracy:.2f}%")

mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean Random Forest Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')

X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']

threshold = y.mean()
y_binary = (y >= threshold).astype(int)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)

    dt_classifier = DecisionTreeClassifier(random_state=None)
    dt_classifier.fit(X_train, y_train)

    y_pred = dt_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"Decision Tree Accuracy {_ + 1}: {accuracy:.2f}%")

mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean Decision Tree Accuracy: {mean_accuracy:.2f}%")

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('bollywood_box_clean.csv')

X = df[['movie_opening', 'movie_weekend', 'movie_firstweek', 'runtime']]
y = df['movie_total_worldwide']

threshold = y.mean()
y_binary = (y >= threshold).astype(int)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=None)

    xgb_classifier = XGBClassifier(random_state=None)
    xgb_classifier.fit(X_train, y_train)

    y_pred = xgb_classifier.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy * 100)
    print(f"XGBoost Accuracy {_ + 1}: {accuracy:.2f}%")

mean_accuracy = sum(accuracies) / len(accuracies)
print(f"\nMean XGBoost Accuracy: {mean_accuracy:.2f}%")