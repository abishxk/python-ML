# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mldE-m8njjihO1waq9LFZ5f9a_JLjyDK
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
import numpy as np

df = pd.read_csv('LBMA-SILVER.csv')
df['USD_Lag1'] = df['USD'].shift(1)
df = df.dropna()

X = df[['USD_Lag1']]
y = df['USD']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

r2_values = []

for _ in range(10):
    knn_regressor = KNeighborsRegressor()
    knn_regressor.fit(X_train, y_train)

    y_pred = knn_regressor.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    r2_values.append(r2)
    print(f'R-squared for KNN (Iteration {_ + 1}): {r2:.4f}')

# Optionally, you can also print the average R-squared over the 10 iterations
average_r2 = np.mean(r2_values)
print(f'\nAverage R-squared for KNN over 10 iterations: {average_r2:.4f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import r2_score
import numpy as np

df = pd.read_csv('LBMA-SILVER.csv')
df['USD_Lag1'] = df['USD'].shift(1)
df = df.dropna()

X = df[['USD_Lag1']]
y = df['USD']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

r2_values = []

for _ in range(10):
    svm_regressor = SVR()
    svm_regressor.fit(X_train, y_train)

    y_pred = svm_regressor.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    r2_values.append(r2)
    print(f'R-squared for SVM (Iteration {_ + 1}): {r2:.4f}')

# Optionally, you can also print the average R-squared over the 10 iterations
average_r2 = np.mean(r2_values)
print(f'\nAverage R-squared for SVM over 10 iterations: {average_r2:.4f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score
import numpy as np

df = pd.read_csv('LBMA-SILVER.csv')
df['USD_Lag1'] = df['USD'].shift(1)
df = df.dropna()

X = df[['USD_Lag1']]
y = df['USD']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

r2_values = []

for _ in range(10):
    dt_regressor = DecisionTreeRegressor(random_state=42)
    dt_regressor.fit(X_train, y_train)

    y_pred = dt_regressor.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    r2_values.append(r2)
    print(f'R-squared for Decision Tree (Iteration {_ + 1}): {r2:.4f}')

# Optionally, you can also print the average R-squared over the 10 iterations
average_r2 = np.mean(r2_values)
print(f'\nAverage R-squared for Decision Tree over 10 iterations: {average_r2:.4f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import numpy as np

df = pd.read_csv('LBMA-SILVER.csv')
df['USD_Lag1'] = df['USD'].shift(1)
df = df.dropna()

X = df[['USD_Lag1']]
y = df['USD']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

r2_values = []

for _ in range(10):
    linear_regressor = LinearRegression()
    linear_regressor.fit(X_train, y_train)

    y_pred = linear_regressor.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    r2_values.append(r2)
    print(f'R-squared for Linear Regression (Iteration {_ + 1}): {r2:.4f}')

# Optionally, you can also print the average R-squared over the 10 iterations
average_r2 = np.mean(r2_values)
print(f'\nAverage R-squared for Linear Regression over 10 iterations: {average_r2:.4f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
import numpy as np

df = pd.read_csv('LBMA-SILVER.csv')
df['USD_Lag1'] = df['USD'].shift(1)
df = df.dropna()

X = df[['USD_Lag1']]
y = df['USD']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

r2_values = []

for _ in range(10):
    rf_regressor = RandomForestRegressor(random_state=42)
    rf_regressor.fit(X_train, y_train)

    y_pred = rf_regressor.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    r2_values.append(r2)
    print(f'R-squared for Random Forest (Iteration {_ + 1}): {r2:.4f}')

# Optionally, you can also print the average R-squared over the 10 iterations
average_r2 = np.mean(r2_values)
print(f'\nAverage R-squared for Random Forest over 10 iterations: {average_r2:.4f}')