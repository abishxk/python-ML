# -*- coding: utf-8 -*-
"""Restaurant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upKzFQPoIxrTIZOKni2EKRDcYDBZyyxy
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

file_path = "Restaurant_revenue (1).csv"
restaurant_data = pd.read_csv(file_path)
revenue_mean = restaurant_data['Monthly_Revenue'].mean()
restaurant_data['Revenue_Class'] = (restaurant_data['Monthly_Revenue'] > revenue_mean).astype(int)
X = restaurant_data.drop(['Monthly_Revenue', 'Revenue_Class', 'Cuisine_Type'], axis=1)
y = restaurant_data['Revenue_Class']
accuracies = []
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    k_neighbors = 5
    knn_classifier = KNeighborsClassifier(n_neighbors=k_neighbors)
    knn_classifier.fit(X_train_scaled, y_train)
    y_pred = knn_classifier.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'Accuracy: {accuracy:.4f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy}')

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

file_path = "Restaurant_revenue (1).csv"
restaurant_data = pd.read_csv(file_path)
revenue_mean = restaurant_data['Monthly_Revenue'].mean()
restaurant_data['Revenue_Class'] = (restaurant_data['Monthly_Revenue'] > revenue_mean).astype(int)
X = restaurant_data.drop(['Monthly_Revenue', 'Revenue_Class', 'Cuisine_Type'], axis=1)
y = restaurant_data['Revenue_Class']
accuracies = []
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)
    n_estimators = 100
    random_forest_classifier = RandomForestClassifier(n_estimators=n_estimators, random_state=None)
    random_forest_classifier.fit(X_train, y_train)
    y_pred = random_forest_classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'Accuracy: {accuracy:.4f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy}')

from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

file_path = "Restaurant_revenue (1).csv"
restaurant_data = pd.read_csv(file_path)
revenue_mean = restaurant_data['Monthly_Revenue'].mean()
restaurant_data['Revenue_Class'] = (restaurant_data['Monthly_Revenue'] > revenue_mean).astype(int)
X = restaurant_data.drop(['Monthly_Revenue', 'Revenue_Class', 'Cuisine_Type'], axis=1)
y = restaurant_data['Revenue_Class']
accuracies = []
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)
    n_estimators = 100
    xgb_classifier = XGBClassifier(n_estimators=n_estimators, random_state=None)
    xgb_classifier.fit(X_train, y_train)
    y_pred = xgb_classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'Accuracy: {accuracy:.4f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy}')

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

file_path = "Restaurant_revenue (1).csv"
restaurant_data = pd.read_csv(file_path)
revenue_mean = restaurant_data['Monthly_Revenue'].mean()
restaurant_data['Revenue_Class'] = (restaurant_data['Monthly_Revenue'] > revenue_mean).astype(int)
X = restaurant_data.drop(['Monthly_Revenue', 'Revenue_Class', 'Cuisine_Type'], axis=1)
y = restaurant_data['Revenue_Class']
accuracies = []
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)
    decision_tree_classifier = DecisionTreeClassifier(random_state=None)
    decision_tree_classifier.fit(X_train, y_train)
    y_pred = decision_tree_classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'Accuracy: {accuracy:.4f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy}')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import pandas as pd

file_path = "Restaurant_revenue (1).csv"
restaurant_data = pd.read_csv(file_path)

revenue_mean = restaurant_data['Monthly_Revenue'].mean()

restaurant_data['Revenue_Class'] = (restaurant_data['Monthly_Revenue'] > revenue_mean).astype(int)

X = restaurant_data.drop(['Monthly_Revenue', 'Revenue_Class', 'Cuisine_Type'], axis=1)
y = restaurant_data['Revenue_Class']

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    svm_classifier = SVC(kernel='rbf', C=1.0, gamma='scale', random_state=None)

    svm_classifier.fit(X_train_scaled, y_train)

    y_pred = svm_classifier.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    print(f'Accuracy: {accuracy:.4f}')

mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy}')