# -*- coding: utf-8 -*-
"""PCOSSSSSSSSSS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jFglEBu-P8-N9zbB5uCc06zk49JAb7VM
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

df = pd.read_excel('PCOS_data_without_infertility.xlsx')
features = ['Follicle No. (R)', 'Follicle No. (L)', 'Skin darkening (Y/N)',
            'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)',
            'Fast food (Y/N)', 'Pimples(Y/N)']
accuracies = []
X = df[features]
y = df['PCOS (Y/N)']

imputer = SimpleImputer(strategy='most_frequent')
X_imputed = imputer.fit_transform(X)
X_imputed_df = pd.DataFrame(X_imputed, columns=X.columns)
X_imputed_encoded = pd.get_dummies(X_imputed_df, columns=['Skin darkening (Y/N)', 'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)', 'Fast food (Y/N)', 'Pimples(Y/N)'])

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X_imputed_encoded, y, test_size=0.2, random_state=None)
    nb_classifier = GaussianNB()
    nb_classifier.fit(X_train, y_train)
    y_test_pred = nb_classifier.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    accuracies.append(test_accuracy)
    print(f'{test_accuracy*100:.2f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy*100:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

df = pd.read_excel('PCOS_data_without_infertility.xlsx')
features = ['Follicle No. (R)', 'Follicle No. (L)', 'Skin darkening (Y/N)',
            'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)',
            'Fast food (Y/N)', 'Pimples(Y/N)']

X = df[features]
y = df['PCOS (Y/N)']
accuracies = []
imputer = SimpleImputer(strategy='most_frequent')
X_imputed = imputer.fit_transform(X)
X_imputed_df = pd.DataFrame(X_imputed, columns=X.columns)
X_imputed_encoded = pd.get_dummies(X_imputed_df, columns=['Skin darkening (Y/N)', 'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)', 'Fast food (Y/N)', 'Pimples(Y/N)'])

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X_imputed_encoded, y, test_size=0.2, random_state=None)
    svm_classifier = SVC()
    svm_classifier.fit(X_train, y_train)
    y_test_pred = svm_classifier.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    accuracies.append(test_accuracy)
    print(f'{test_accuracy*100:.2f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy*100:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load your dataset
df = pd.read_excel('PCOS_data_without_infertility.xlsx')
accuracies = []
# Select relevant features
features = ['Follicle No. (R)', 'Follicle No. (L)', 'Skin darkening (Y/N)',
            'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)',
            'Fast food (Y/N)', 'Pimples(Y/N)']

# Extract features and target variable
X = df[features]
y = df['PCOS (Y/N)']

# Handle missing values with 'most_frequent' strategy
imputer = SimpleImputer(strategy='most_frequent')
X_imputed = imputer.fit_transform(X)

# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

# Print 10 accuracies
for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=None)

    # Build the neural network model
    model = Sequential()
    model.add(Dense(128, input_dim=X_train.shape[1], activation='relu'))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))

    # Compile the model
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    # Train the model
    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2, verbose=0)

    # Evaluate the model on the test set
    y_test_pred_probs = model.predict(X_test)
    y_test_pred = (y_test_pred_probs > 0.5).astype(int)

    test_accuracy = accuracy_score(y_test, y_test_pred)
    accuracies.append(test_accuracy)
    print(f'{test_accuracy*100:.2f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy*100:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df = pd.read_excel('PCOS_data_without_infertility.xlsx')
features = ['Follicle No. (R)', 'Follicle No. (L)', 'Skin darkening (Y/N)',
            'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)',
            'Fast food (Y/N)', 'Pimples(Y/N)']
accuracies = []
X = df[features]
y = df['PCOS (Y/N)']

imputer = SimpleImputer(strategy='most_frequent')
X_imputed = imputer.fit_transform(X)
X_imputed_df = pd.DataFrame(X_imputed, columns=X.columns)
X_imputed_encoded = pd.get_dummies(X_imputed_df, columns=['Skin darkening (Y/N)', 'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)', 'Fast food (Y/N)', 'Pimples(Y/N)'])

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X_imputed_encoded, y, test_size=0.9, random_state=None)
    logreg_classifier = LogisticRegression()
    logreg_classifier.fit(X_train, y_train)
    y_test_pred = logreg_classifier.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    accuracies.append(test_accuracy)
    print(f'{test_accuracy*100:.2f}')
mean_accuracy = sum(accuracies) / len(accuracies)
print(f'Mean Accuracy: {mean_accuracy*100:.2f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load your dataset
df = pd.read_excel('PCOS_data_without_infertility.xlsx')

# Select relevant features
features = ['Follicle No. (R)', 'Follicle No. (L)', 'Skin darkening (Y/N)',
            'hair growth(Y/N)', 'Weight gain(Y/N)', 'Cycle(R/I)',
            'Fast food (Y/N)', 'Pimples(Y/N)']

# Extract features and target variable
X = df[features]
y = df['PCOS (Y/N)']

# Handle missing values with 'most_frequent' strategy
imputer = SimpleImputer(strategy='most_frequent')
X_imputed = imputer.fit_transform(X)

# Number of runs
num_runs = 10
accuracies = []

for _ in range(num_runs):
    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=None)

    # Initialize the KNN classifier
    knn_classifier = KNeighborsClassifier()

    # Train the model
    knn_classifier.fit(X_train, y_train)

    # Make predictions on the test set
    y_test_pred = knn_classifier.predict(X_test)

    # Evaluate and store accuracy
    test_accuracy = accuracy_score(y_test, y_test_pred)
    accuracies.append(test_accuracy)
    print(f'{test_accuracy*100:.2f}')

# Print the mean accuracy
mean_accuracy = sum(accuracies) / num_runs
print(f'Mean Accuracy: {mean_accuracy*100:.2f}')