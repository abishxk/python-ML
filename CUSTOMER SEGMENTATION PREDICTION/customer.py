# -*- coding: utf-8 -*-
"""Customer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cjzW7NLkAG0xMhPY6fM7gjWy-bg6zeve
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('Customer_Data (1).csv')
target_variable = 'ONEOFF_PURCHASES'
df = df.dropna(subset=[target_variable])

threshold = df[target_variable].mean()
df['Target_Class'] = (df[target_variable] > threshold).astype(int)

features = df.drop([target_variable, 'CUST_ID', 'Target_Class'], axis=1)
target = df['Target_Class']

imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    svm_model = SVC(kernel='linear', C=1.0, random_state=None)
    svm_model.fit(X_train_scaled, y_train)

    predictions = svm_model.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, predictions)
    accuracies.append(accuracy)

print('Accuracies for 10 different splits:')
for i, acc in enumerate(accuracies, 1):
    print(f'Split {i}: {acc * 100:.2f}%')

#Random forest
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('Customer_Data (1).csv')
target_variable = 'ONEOFF_PURCHASES'
df = df.dropna(subset=[target_variable])

threshold = df[target_variable].mean()
df['Target_Class'] = (df[target_variable] > threshold).astype(int)

features = df.drop([target_variable, 'CUST_ID', 'Target_Class'], axis=1)
target = df['Target_Class']

imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    rf_model = RandomForestClassifier(n_estimators=100, random_state=None)  # You can adjust the number of estimators
    rf_model.fit(X_train_scaled, y_train)

    predictions = rf_model.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, predictions)
    accuracies.append(accuracy)

print('Accuracies for 10 different splits:')
for i, acc in enumerate(accuracies, 1):
    print(f'Split {i}: {acc * 100:.2f}%')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

df = pd.read_csv('Customer_Data (1).csv')
target_variable = 'ONEOFF_PURCHASES'
threshold = df[target_variable].mean()
df['Target_Class'] = (df[target_variable] > threshold).astype(int)

features = df.drop([target_variable, 'CUST_ID', 'Target_Class'], axis=1)
target = df['Target_Class']

imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = Sequential()
    model.add(Dense(64, activation='relu', input_dim=X_train_scaled.shape[1]))
    model.add(Dense(1, activation='sigmoid'))

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    model.fit(X_train_scaled, y_train, epochs=10, batch_size=32, validation_split=0.2)

    predictions = (model.predict(X_test_scaled) > 0.5).astype(int)
    accuracy = accuracy_score(y_test, predictions)
    accuracies.append(accuracy)

print('Accuracies for 10 different splits:')
for i, acc in enumerate(accuracies, 1):
    print(f'Split {i}: {acc * 100:.2f}%')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

df = pd.read_csv('Customer_Data (1).csv')
target_variable = 'ONEOFF_PURCHASES'
threshold = df[target_variable].mean()
df['Target_Class'] = (df[target_variable] > threshold).astype(int)

features = df.drop([target_variable, 'CUST_ID', 'Target_Class'], axis=1)
target = df['Target_Class']

imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    nb_model = GaussianNB()
    nb_model.fit(X_train_scaled, y_train)

    predictions = nb_model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, predictions)
    accuracies.append(accuracy)

print('Accuracies for 10 different splits:')
for i, acc in enumerate(accuracies, 1):
    print(f'Split {i}: {acc * 100:.2f}%')



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('Customer_Data (1).csv')
target_variable = 'ONEOFF_PURCHASES'
threshold = df[target_variable].mean()
df['Target_Class'] = (df[target_variable] > threshold).astype(int)

features = df.drop([target_variable, 'CUST_ID', 'Target_Class'], axis=1)
target = df['Target_Class']

imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    dt_model = DecisionTreeClassifier()
    dt_model.fit(X_train_scaled, y_train)

    predictions = dt_model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, predictions)
    accuracies.append(accuracy)

print('Accuracies for 10 different splits:')
for i, acc in enumerate(accuracies, 1):
    print(f'Split {i}: {acc * 100:.2f}%')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('Customer_Data (1).csv')
target_variable = 'ONEOFF_PURCHASES'
threshold = df[target_variable].mean()
df['Target_Class'] = (df[target_variable] > threshold).astype(int)

features = df.drop([target_variable, 'CUST_ID', 'Target_Class'], axis=1)
target = df['Target_Class']

imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

accuracies = []

for _ in range(10):
    X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=None)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    xgb_model = XGBClassifier()
    xgb_model.fit(X_train_scaled, y_train)

    predictions = xgb_model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, predictions)
    accuracies.append(accuracy)

print('Accuracies for 10 different splits:')
for i, acc in enumerate(accuracies, 1):
    print(f'Split {i}: {acc * 100:.2f}%')